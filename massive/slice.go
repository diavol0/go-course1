// _Срез_ (slice) — ключевая структура данных в Go.
// Это массив изменяемой длины, как list в питоне или Array в js.
// Обычно в программах на Go оперируют именно срезами,
// «чистые» массивы встречаются намного реже.

package main

import "fmt"

func main() {

	// Срез определяется только типом элементов, но не их количеством.
	// Чтобы создать срез ненулевой длины, используют встроенную функцию `make()`.
	s := make([]string, 3)
	fmt.Printf("empty: %#v\n", s)
	// empty: []string{"", "", ""}

	// С элементами среза можно работать точно так же, как с элементами массива.
	s[0] = "a"
	s[1] = "b"
	s[2] = "c"
	fmt.Println("set:", s)
	// set: [a b c]
	fmt.Println("get:", s[2])
	// get: c

	// `len()` возвращает длину среза.
	fmt.Println("len:", len(s))
	// len: 3

	// В отличие от массива, в срез можно добавлять новые элементы
	// через встроенную функцию `append()`. Функция возвращает новый срез.
	fmt.Println("src:", s)
	// src: [a b c]
	s = append(s, "d")
	s = append(s, "e", "f")
	fmt.Println("upd:", s)
	// upd: [a b c d e f]

	// Срез можно скопировать через встроенную функцию `copy()`.
	dst := make([]string, len(s))
	copy(dst, s)
	fmt.Println("copy:", dst)
	// copy: [a b c d e f]

	// Срезы поддерживают... срезы (отсюда их название).
	// Выражение slice[from:to] вернет срез
	// от элемента с индексом from включительно
	// до элемента с индексом to не включительно.
	sl1 := s[2:5]
	fmt.Println("sl1:", sl1)
	// sl1: [c d e]

	// Этот срез включает все элементы, кроме `s[5]`.
	sl2 := s[:5]
	fmt.Println("sl2:", sl2)
	// sl2: [a b c d e]

	// А этот срез включает элементы от `s[2]` и до конца.
	sl3 := s[2:]
	fmt.Println("sl3:", sl3)
	// sl3: [c d e f]

	// Срез можно инициализировать при объявлении.
	t := []string{"g", "h", "i"}
	fmt.Println("init:", t)
	// init: [g h i]
}
